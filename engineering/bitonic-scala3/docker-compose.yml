services:
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - bitonic
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
  memcached:
    image: memcached:alpine3.22
    container_name: memcached
    ports:
      - "11211:11211"
    networks:
      - bitonic
    healthcheck:
      test: ["CMD-SHELL", "echo stats | nc 127.0.0.1 11211 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    command:
      - --conn-limit=1024
      - --memory-limit=64
      - --threads=4
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis:6379
    networks:
      - bitonic
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  memcached-exporter:
    image: prom/memcached-exporter:latest
    container_name: memcached-exporter
    ports:
      - "9150:9150"
    command:
      - --memcached.address=memcached:11211
    networks:
      - bitonic
    depends_on:
      - memcached
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  app:
    container_name: bitonic-app
    build: .
    depends_on:
      redis:
        condition: service_healthy
      memcached:
        condition: service_healthy
    environment:
      APP_PORT: 8080
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MEMCACHED_HOST: memcached
      MEMCACHED_PORT: 11211
      # JVM options for better logging and performance
      JAVA_OPTS: "-XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport -Xmx512m"
      # Force console output to flush immediately
      SBT_OPTS: "-Dsbt.log.noformat=true"
    ports:
      - "8080:8080"
    networks:
      - bitonic
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/health-check || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Ensure logs are shown in real-time
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Add stdin/tty for interactive logging
    stdin_open: true
    tty: true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M

  influxdb:
    image: influxdb:1.12.2
    environment:
      INFLUXDB_DB: k6
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: admin
      INFLUXDB_DATA_MAX_VALUES_PER_TAG: 0
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb
    networks:
      - bitonic
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    networks:
      - bitonic
    depends_on:
      - influxdb
      - redis-exporter
      - memcached-exporter
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana
    depends_on:
      - influxdb
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_FORCE_DEFAULT_ADMIN_PASSWORD_CHANGE: "false"
      SSL_CERT_FILE: /etc/ssl/certs/custom-cert.pem
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/config/custom.ini:/etc/grafana/custom.ini
    restart: always
    networks:
      - bitonic
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  k6:
    image: grafana/k6:latest
    depends_on:
      app:
        condition: service_healthy
      influxdb:
        condition: service_started
    volumes:
      - ./benchmark/payloads.json:/benchmark/payloads.json
      - ./benchmark/benchmark.js:/benchmark/benchmark.js
    networks:
      - bitonic
    entrypoint: ["k6"]
    command:
      [
        "run",
        "--out",
        "influxdb=http://influxdb:8086/k6?consistency=one",
        "/benchmark/benchmark.js",
      ]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  bitonic:
    driver: bridge

volumes:
  influxdb-data:
